package view;

import java.awt.Color;
import view.SudokuSave;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.Insets;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.BoxLayout;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.border.EmptyBorder;
import javax.swing.border.MatteBorder;
import controller.SudokuGame;
import controller.SudokuStart;

//the pop up frame that asks the user if they want to save the game or not
public class SudokuSaveOption {
	
	//main components
	public JFrame frame;
	public JButton yes, no, label;
	public JPanel panel;
	
	//colors
	public static final Color SUPERBLACK = new Color(29, 29, 29);
	public static final Color LIGHTBLACK = new Color(52, 54, 60);
	public static final Color WHITE = new Color(254,253,253);
	public static final Color YELLOW = new Color(238,213,87);
	public static final Color ORANGE = new Color(239,187,64);
	
	//dimensions
	Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
    public int height = screenSize.height;
    public int width = screenSize.width;
    
    //fonts
    public Font option = new Font("Helvetica Neue", Font.BOLD, (int)(height/43.75));
    public Font save = new Font("Helvetica Neue", Font.PLAIN,(int)(height/35));
	
	public SudokuSaveOption() {
		
		frame = new JFrame();		
	    frame.setSize((int)(width/4.54),(int)(height/2.87));
		frame.setLocationRelativeTo(null);
		frame.getContentPane().setBackground(SUPERBLACK);
		frame.setResizable(false);
		
		panel = new JPanel();	
		panel.setBorder(new EmptyBorder(new Insets((int)(width/56),(int)(width/56),(int)(width/5.6),(int)(width/5.6)))); //X,Y,Length,Height
		panel.setBackground(SUPERBLACK);
		panel.setLayout(new BoxLayout(panel, BoxLayout.PAGE_AXIS));
		int x = (int)(height/350);
		panel.setBorder(new MatteBorder(x,x,x,x,YELLOW));
		
		label = new JButton("Save your game?");
		label.setBounds((int)(width/42),(int)(height/70),(int)(width/5.6),(int)(height/10.5));
		label.setForeground(WHITE);
		label.setFont(save);
		label.setOpaque(false);
		label.setBorderPainted(false);
		
		int optionx = (int)(width/14);
		int optionwidth = (int)(width/12);
		int optionheight = (int)(height/17.5);
		
		no = new JButton("NO");
		no.setFont(option);
		no.setBounds(optionx,(int)(height/8.75),optionwidth,optionheight);
		no.setForeground(SUPERBLACK);
		no.setBackground(YELLOW);
		no.setOpaque(true);
		no.setBorderPainted(false);
		
		yes = new JButton("YES");
		yes.setFont(option);
		yes.setBounds(optionx,(int)(height/4.77),optionwidth,optionheight);
		yes.setForeground(SUPERBLACK);
		yes.setBackground(YELLOW);
		yes.setOpaque(true);
		yes.setBorderPainted(false);	
		
		frame.add(label);
		frame.add(no);
		frame.add(yes);
		frame.add(panel);
		frame.setVisible(true);
		
		//hover effect for the no button
		no.addMouseListener(new java.awt.event.MouseAdapter() {
		    public void mouseEntered(java.awt.event.MouseEvent evt) {
		        no.setBackground(ORANGE);
		        no.setForeground(SUPERBLACK);
		    }
		    public void mouseExited(java.awt.event.MouseEvent evt) {
		        no.setBackground(YELLOW);
		        no.setForeground(SUPERBLACK);
		    }
		});
		//when no is clicked everything on display will be disposed
		no.addActionListener(new ActionListener() {
	        @Override
	        public void actionPerformed(ActionEvent e) {
	        	frame.dispose();
	        	SudokuGame.disposeFrame();
	        	SudokuQuit.disposeFrame();
	        }
	    });
		//yes hovering effect
		yes.addMouseListener(new java.awt.event.MouseAdapter() {
		    public void mouseEntered(java.awt.event.MouseEvent evt) {
		        yes.setBackground(ORANGE);
		        yes.setForeground(SUPERBLACK);
		    }
		    public void mouseExited(java.awt.event.MouseEvent evt) {
		        yes.setBackground(YELLOW);
		        yes.setForeground(SUPERBLACK);
		    }
		});
		//when yes is clicked, SudokuSave will ask where the user wants to save 
		//after that, other frame will be disposed
		yes.addActionListener(new ActionListener() {
	        @Override
	        public void actionPerformed(ActionEvent e) {
	        	new SudokuSave(SudokuStart.getMode(),SudokuGame.getLevel(), SudokuGame.getSudokuBoard(), SudokuGame.getStatusBoard(), SudokuGame.getWrongBoard(), SudokuGame.getBoard(), SudokuGame.getHintLeft());
	        	frame.dispose();
	        	SudokuGame.disposeFrame();
	        	SudokuQuit.disposeFrame();
	        }
	    });
	}
}
