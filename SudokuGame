import java.awt.Color;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.GridLayout;
import java.awt.Image;
import java.awt.Insets;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.BorderFactory;
import javax.swing.BoxLayout;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JTextField;
import javax.swing.border.EmptyBorder;
import javax.swing.border.MatteBorder;

import view.InputListener;
import model.SudokuGenerator;

public class SudokuGame {

    private JButton status;
	private static JButton hint;
	private JButton undo;
	private JButton pause;
    private static JLabel hintNum;
    private static JFrame frame;
    private JPanel panel, Panel;
    public static JTextField[][] cells = new JTextField[9][9];
    public JPanel[][]  grid = new JPanel[3][3];
    Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
    public int height = screenSize.height;
    public int width = screenSize.width;
    public static int hintleft = 3;

    public static SudokuGenerator puzzle;
    public static int[][] board;
    public static int[][] sudoku = new int[9][9];
    
    //Select
    public static boolean selecthint = false, selectundo = false, selectpause = false;
    
    //Clicks
    private static int hintclick = 0,undoclick = 0,pauseclick = 0;
    


    
    //COLORS
    public static final Color SUPERBLACK = new Color(29, 29, 29);
    public static final Color MEDIUMBLACK = new Color(34, 35, 39);
    public static final Color LIGHTBLACK = new Color(52, 54, 60);
    public static final Color WHITE = new Color(254,253,253);
    public static final Color YELLOW = new Color(238,213,87);
    public static final Color YELLOWBorder = new Color(131,123,70);
    public static final Color ORANGE = new Color(239,187,64);
    
    //GRID
    public Font FONTGrid = new Font("Titllium Web", Font.BOLD, (int)(height/33));
    public Font FONT = new Font("Helvetica Neue", Font.BOLD, (int)(height/13.12));
    public Font font = new Font("Helvetica Neue", Font.BOLD, (int)(height/17.5));
    public Font fontez = new Font("Helvetica Neue", Font.BOLD, (int)(height/30));
    public Font fonthint = new Font("Helvetica Neue", Font.BOLD, (int)(width/76));

    
    public SudokuGame(int mode) {
    	
    	frame = new JFrame();
    	
	    frame.setSize((int) (width/2.58), (int) (height/1.07));
		frame.setLocationRelativeTo(null);
		frame.getContentPane().setBackground(SUPERBLACK);

		panel = new JPanel();
		//X,Y,Length,Height
		panel.setBorder(new EmptyBorder(new Insets((int) (width/11.2), (int) (height/10.5), (int)(width/8.4), (int)(height/10.5))));
		panel.setBackground(SUPERBLACK);
		panel.setLayout(new BoxLayout(panel, BoxLayout.PAGE_AXIS));
		
		
		
		//Grid

		Panel = new JPanel(new GridLayout(3,3));
        Panel.setBorder(BorderFactory.createLineBorder(YELLOW,2));
        Panel.setBackground(YELLOW);
        Panel.setBounds((int)(width/40),(int)(height/6.48),(int)(height/1.84),(int)(height/1.84)); //(X,Y,Width,Height)
       
        for(int i = 0 ; i < 3; i++) {
    		for(int j = 0; j < 3; j++) {
    			grid[i][j] = new JPanel(new GridLayout(3,3,1,1));
    			grid[i][j].setBorder(new MatteBorder(1,1,1,1,YELLOW));
    			grid[i][j].setBackground(SUPERBLACK);
    			Panel.add(grid[i][j]);
    		}
    	}
        status = new JButton();
    	setStatus(mode, status);

        
        InputListener listener = new InputListener();
     	for(int i = 0; i < 9; i++) {
    		for(int j = 0; j < 9; j++) {
    			cells[i][j] = new JTextField();
    			if(board[i][j] != 0) {
    				cells[i][j].setText(board[i][j]+""); 
    				cells[i][j].setEditable(false);
        			cells[i][j].setBackground(MEDIUMBLACK);
    				cells[i][j].setForeground(WHITE);
    			}
    			else {
    				cells[i][j].setBackground(MEDIUMBLACK);
    				cells[i][j].setForeground(YELLOW);
    				cells[i][j].addFocusListener(listener);
    				cells[i][j].addKeyListener(listener);
    			}
    			int row = i/3;
				int col = j/3;
				cells[i][j].setHorizontalAlignment(JTextField.CENTER);
				cells[i][j].setBorder(BorderFactory.createLineBorder(YELLOWBorder,1));
				cells[i][j].setFont(FONTGrid);
				grid[row][col].add(cells[i][j]);	

    		}
    	};
    	//mode	
		//hint, undo, pause
		int imagedim = (int) (height/23.33);
		int boundsY = (int)(height/1.32);
		int OptionDim = (int)(width/22.4);
		ImageIcon Bulb = new ImageIcon("Hint.png");
		Image img = Bulb.getImage() ;  
		Image newimg = img.getScaledInstance( imagedim, imagedim,  java.awt.Image.SCALE_SMOOTH ) ;  
		Bulb = new ImageIcon( newimg );
		hint = new JButton(Bulb);
		hint.setBackground(LIGHTBLACK);
		hint.setBounds((int)(width/16.47),boundsY,OptionDim,OptionDim);
		hint.setOpaque(true);
		hint.setBorderPainted(false);
		
		hintNum = new JLabel(Integer.toString(hintleft),JLabel.CENTER);
		hintNum.setBackground(YELLOW);
		hintNum.setForeground(SUPERBLACK);
		hintNum.setFont(fonthint);
		hintNum.setOpaque(true);
		hintNum.setBounds((int)(width/2.89),(int)(height/105),(int)(width/30),(int)(width/30));
		
		ImageIcon Undo = new ImageIcon("Undo.png");
		Image img1 = Undo.getImage() ;  
		Image newimg1 = img1.getScaledInstance( (int)(height/26.25), (int)(height/26.25),  java.awt.Image.SCALE_SMOOTH ) ;  
		Undo = new ImageIcon( newimg1 );
		undo = new JButton(Undo);
		undo.setBackground(LIGHTBLACK);
		undo.setBounds((int)(width/5.83),boundsY,OptionDim,OptionDim);
		undo.setOpaque(true);
		undo.setBorderPainted(false);
		
		ImageIcon Pause = new ImageIcon("Pause.png");
		Image img2 = Pause.getImage() ;  
		Image newimg2 = img2.getScaledInstance( imagedim, imagedim,  java.awt.Image.SCALE_SMOOTH ) ;  
		Pause = new ImageIcon( newimg2 );
		pause = new JButton(Pause);
		pause.setBackground(LIGHTBLACK);
		pause.setBounds((int)(width/3.51),boundsY,OptionDim,OptionDim);
		pause.setOpaque(true);
		pause.setBorderPainted(false);
		
		//adding buttons to frame
		frame.add(hintNum);
		frame.add(status);
		frame.add(hint);
		frame.add(undo);
		frame.add(pause);
		frame.add(Panel);
		frame.add(panel);	
		frame.setVisible(true);
		frame.setResizable(false);
		
		//mouse hovering over effect
		hint.addMouseListener(new java.awt.event.MouseAdapter() {
		    public void mouseEntered(java.awt.event.MouseEvent evt) {
		    	if(!selecthint) setHover(hint);
		    }
		    public void mouseExited(java.awt.event.MouseEvent evt) {
		    	if(!selecthint) resetButton(hint);
		    }
		});
		hint.addActionListener(new ActionListener() {
	        @Override
	        public void actionPerformed(ActionEvent e) {
	        	hintclick++;
	        	if(hintleft<=0) {
	        		new Hints();
	        	}
	        	else {
	        		if(hintclick %2 != 0) {
			        	selecthint = true;
			        	setSelect(hint);
		        	}
		        	else {
		        		selecthint = false;
		        		resetButton(hint);
		        	}
	        	}
	        }
	    });
		
		undo.addMouseListener(new java.awt.event.MouseAdapter() {
		    public void mouseEntered(java.awt.event.MouseEvent evt) {
		    	if(!selectundo) setHover(undo);
		    }
		    public void mouseExited(java.awt.event.MouseEvent evt) {
		    	if(!selectundo) resetButton(undo);
		    }
		});
		undo.addActionListener(new ActionListener() {
	        @Override
	        public void actionPerformed(ActionEvent e) {
	        	
	        }
	    });
		
		pause.addMouseListener(new java.awt.event.MouseAdapter() {
		    public void mouseEntered(java.awt.event.MouseEvent evt) {
		        if(!selectpause) setHover(pause);
		    }
		    public void mouseExited(java.awt.event.MouseEvent evt) {
		        if(!selectpause) resetButton(pause);
		    }
		});
		pause.addActionListener(new ActionListener() {
	        @Override
	        public void actionPerformed(ActionEvent e) {
	        	pauseclick++;
	        	if(pauseclick %2 != 0) {
		        	selectpause = true;

		        	setSelect(pause);
	        	}
	        	else {
		        	selectpause = false;
	        		resetButton(pause);
	        	}
	        }
	    });
		
    }
    
	//setting the status label and board according to the mode
	private void setStatus(int mode, JButton status2) {
		int ModeButtonX = (int)(width/8.61);
		int ModeButtonY = (int)(height/18.42);
		int ModeButtonLength = (int)(width/6.46);
		int ModeButtonHeight = (int)(height/17.5);
		puzzle = new SudokuGenerator();
		sudoku = puzzle.getSudokuGenerated(sudoku);

		switch(mode) {
		case 1:
			status.setText("Easy");
	        board = puzzle.sudokuPuzzle(mode);
			break;
		case 2:
			status.setText("Medium");
	        board = puzzle.sudokuPuzzle(mode);
			break;
		case 3:
			status.setText("Hard");
	        board = puzzle.sudokuPuzzle(mode);
			break;
		}
//		for(int i = 0; i<9; i++) {
//			for(int j = 0; j < 9; j++) {
//				System.out.print(sudoku[i][j]);
//			}
//			System.out.println();
//		}
		status.setFont(fontez);
    	status.setBackground(LIGHTBLACK);
    	status.setForeground(WHITE);
    	status.setBounds(ModeButtonX,ModeButtonY,ModeButtonLength,ModeButtonHeight);
    	status.setOpaque(true);
    	status.setBorderPainted(false);
	}

	public static JTextField[][] getCells() {
    	return cells;
    }
	public static int[][] getBoard(){
		return board;
	}
	public static int[][] getSudokuBoard() {
		return sudoku;
	}
	public static void disposeFrame() {
		frame.dispose();
	}
	public static boolean getUseHint() {
		return selecthint;
	}
	public static int getHintLeft() {
		return hintleft;
	}
	public static int getHintClick() {
		//TODO Auto-generated method stub
		return hintclick;
	}
	public static void resetHint() {
		//TODO Auto-generated method stub
		hintleft--;
		selecthint = false;
		hintclick = 0;
    	hintNum.setText(Integer.toString(hintleft));
		resetButton(hint);
	}
	public static void setHover(JButton button) {
		button.setBackground(YELLOW);
	}
	public static void resetButton(JButton button) {
		button.setBackground(LIGHTBLACK);
	}
	public static void setSelect(JButton button) {
		button.setBackground(ORANGE);
	}
}
