import java.awt.Color;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.GridLayout;
import java.awt.Image;
import java.awt.Insets;
import java.awt.Toolkit;
import javax.imageio.ImageIO;
import javax.swing.BorderFactory;
import javax.swing.BoxLayout;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JTextField;
import javax.swing.border.EmptyBorder;
import javax.swing.border.MatteBorder;

import model.SudokuModel;

public class SudokuInGame {

    private JButton easy, medium, hard, hint, undo, pause;
    private JFrame frame;
    private JPanel panel, Panel;
    public static JTextField[][] cells = new JTextField[9][9];
    public JPanel[][]  grid = new JPanel[3][3];
    Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
    public int height = screenSize.height;
    public int width = screenSize.width;
    
    //COLORS
    public static final Color SUPERBLACK = new Color(29, 29, 29);
    public static final Color MEDIUMBLACK = new Color(34, 35, 39);
    public static final Color LIGHTBLACK = new Color(52, 54, 60);
    public static final Color WHITE = new Color(254,253,253);
    public static final Color YELLOW = new Color(238,213,87);
    public static final Color YELLOWBorder = new Color(131,123,70);
    public static final Color ORANGE = new Color(239,187,64);
    //GRID
    public Font FONTGrid = new Font("Titllium Web", Font.BOLD, (int)(height/30));
    public Font FONT = new Font("Helvetica Neue", Font.BOLD, (int)(height/13.12));
    public Font font = new Font("Helvetica Neue", Font.BOLD, (int)(height/17.5));
    public Font fontez = new Font("Helvetica Neue", Font.BOLD, (int)(height/30));
    
    public SudokuInGame() {
    	
    	frame = new JFrame();
    	
	    frame.setSize((int) (width/2.58), (int) (height/1.07));
		frame.setLocationRelativeTo(null);
		frame.getContentPane().setBackground(SUPERBLACK);

		panel = new JPanel();
		//X,Y,Length,Height
		panel.setBorder(new EmptyBorder(new Insets((int) (width/11.2), (int) (height/10.5), (int)(width/8.4), (int)(height/10.5))));
		panel.setBackground(SUPERBLACK);
		panel.setLayout(new BoxLayout(panel, BoxLayout.PAGE_AXIS));
		
		
		
		//Grid

		Panel = new JPanel(new GridLayout(3,3));
        Panel.setBorder(BorderFactory.createLineBorder(YELLOW,3));
        Panel.setBackground(YELLOW);
        Panel.setBounds((int)(width/40),(int)(height/6.48),(int)(height/1.84),(int)(height/1.84)); //(X,Y,Width,Height)
       
        for(int i = 0 ; i < 3; i++) {
    		for(int j = 0; j < 3; j++) {
    			grid[i][j] = new JPanel(new GridLayout(3,3,1,1));
    			grid[i][j].setBorder(new MatteBorder(2,2,2,2,YELLOW));
    			grid[i][j].setBackground(SUPERBLACK);
    			Panel.add(grid[i][j]);
    		}
    	}
        
        SudokuModel puzzle = new SudokuModel();
        InputListener listener = new InputListener();
        int[][] board = puzzle.getBoard();
    	for(int i = 0; i < 9; i++) {
    		for(int j = 0; j < 9; j++) {
    			cells[i][j] = new JTextField();
    			if(board[i][j] != 0) {
    				cells[i][j].setText(board[i][j]+""); 
    				cells[i][j].setEditable(false);
        			cells[i][j].setBackground(MEDIUMBLACK);
    				cells[i][j].setForeground(WHITE);
    			}
    			else {
    				cells[i][j].setBackground(MEDIUMBLACK);
    				cells[i][j].setForeground(YELLOW);
    				cells[i][j].addKeyListener(listener);
    			}
    			int row = i/3;
				int col = j/3;
				cells[i][j].setHorizontalAlignment(JTextField.CENTER);
				cells[i][j].setBorder(BorderFactory.createLineBorder(YELLOWBorder,1));
				cells[i][j].setFont(FONTGrid);
				grid[row][col].add(cells[i][j]);	

    		}
    	};
		
    	
    	//mode
		int ModeButtonX = (int)(width/8.61);
		int ModeButtonY = (int)(height/18.42);
		int ModeButtonLength = (int)(width/6.46);
		int ModeButtonHeight = (int)(height/17.5);
		
    	easy = new JButton("EASY");
    	easy.setFont(fontez);
    	easy.setBackground(LIGHTBLACK);
    	easy.setForeground(WHITE);
    	easy.setBounds(ModeButtonX,ModeButtonY,ModeButtonLength,ModeButtonHeight);
    	easy.setOpaque(true);
    	easy.setBorderPainted(false);
    	
		medium = new JButton("MEDIUM");
		medium.setFont(fontez);
		medium.setBackground(LIGHTBLACK);
		medium.setForeground(WHITE);
		medium.setBounds(ModeButtonX,ModeButtonY,ModeButtonLength,ModeButtonHeight);
		medium.setOpaque(true);
		medium.setBorderPainted(false);
		
		hard = new JButton("HARD");
		hard.setFont(fontez);
		hard.setBackground(LIGHTBLACK);
		hard.setForeground(WHITE);
		hard.setBounds(ModeButtonX,ModeButtonY,ModeButtonLength,ModeButtonHeight);
		hard.setOpaque(true);
		hard.setBorderPainted(false);
		
		//hint, undo, pause
		int imagedim = (int) (height/23.33);
		int boundsY = (int)(height/1.32);
		int OptionDim = (int)(width/22.4);
		ImageIcon Bulb = new ImageIcon("Hint.png");
		Image img = Bulb.getImage() ;  
		Image newimg = img.getScaledInstance( imagedim, imagedim,  java.awt.Image.SCALE_SMOOTH ) ;  
		Bulb = new ImageIcon( newimg );
		hint = new JButton(Bulb);
		hint.setBackground(LIGHTBLACK);
		hint.setBounds((int)(width/16.47),boundsY,OptionDim,OptionDim);
		hint.setOpaque(true);
		hint.setBorderPainted(false);
		
		ImageIcon Undo = new ImageIcon("Undo.png");
		Image img1 = Undo.getImage() ;  
		Image newimg1 = img1.getScaledInstance( (int)(height/26.25), (int)(height/26.25),  java.awt.Image.SCALE_SMOOTH ) ;  
		Undo = new ImageIcon( newimg1 );
		undo = new JButton(Undo);
		undo.setBackground(LIGHTBLACK);
		undo.setBounds((int)(width/5.83),boundsY,OptionDim,OptionDim);
		undo.setOpaque(true);
		undo.setBorderPainted(false);
		
		ImageIcon Pause = new ImageIcon("Pause.png");
		Image img2 = Pause.getImage() ;  
		Image newimg2 = img2.getScaledInstance( imagedim, imagedim,  java.awt.Image.SCALE_SMOOTH ) ;  
		Pause = new ImageIcon( newimg2 );
		pause = new JButton(Pause);
		pause.setBackground(LIGHTBLACK);
		pause.setBounds((int)(width/3.51),boundsY,OptionDim,OptionDim);
		pause.setOpaque(true);
		pause.setBorderPainted(false);
		
		//adding buttons to frame
		frame.add(easy);
		frame.add(hint);
		frame.add(undo);
		frame.add(pause);
		frame.add(Panel);
		frame.add(panel);	
		frame.setVisible(true);
		frame.setResizable(false);
		
		//mouse hovering over effect
		
		hint.addMouseListener(new java.awt.event.MouseAdapter() {
		    public void mouseEntered(java.awt.event.MouseEvent evt) {
		        hint.setBackground(YELLOW);
		    }
		    public void mouseExited(java.awt.event.MouseEvent evt) {
		        hint.setBackground(LIGHTBLACK);
		    }
		});
		
		undo.addMouseListener(new java.awt.event.MouseAdapter() {
		    public void mouseEntered(java.awt.event.MouseEvent evt) {
		        undo.setBackground(YELLOW);
		    }
		    public void mouseExited(java.awt.event.MouseEvent evt) {
		        undo.setBackground(LIGHTBLACK);
		    }
		});
		
		pause.addMouseListener(new java.awt.event.MouseAdapter() {
		    public void mouseEntered(java.awt.event.MouseEvent evt) {
		        pause.setBackground(YELLOW);
		    }
		    public void mouseExited(java.awt.event.MouseEvent evt) {
		        pause.setBackground(LIGHTBLACK);
		    }
		});
		
    }
    
    public static JTextField[][] getCells() {
    	return cells;
    }
    
    public static void main(String[] args) {
    	new SudokuInGame();
    }

}
